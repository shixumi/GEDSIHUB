@model GedsiHub.ViewModels.QuizViewModel

@{
    Layout = "_LayoutApp";
    bool isEdit = Model.ExamID.HasValue;
    ViewData["Title"] = isEdit ? "Edit Assessment" : "Create Assessment";
}

<!-- Breadcrumbs -->
<ol class="breadcrumb" id="breadcrumb">
    <li class="breadcrumb-item">
        <a asp-controller="Module" asp-action="Index">Modules</a>
    </li>
    <li class="breadcrumb-item">
        <a asp-controller="Module" asp-action="Details" asp-route-id="@Model.ModuleId">Module Details</a>
    </li>
    <li class="breadcrumb-item active">@ViewData["Title"]</li>
</ol>


<div>
    <form asp-action="CreateOrEdit" method="post">
        <div class="feedback-title-searcbar-con">
            <h4 class="create-assessment-text">
                @ViewData["Title"]
            </h4>
        </div>

        <div class="container assessment-container headnote-container">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="ExamID" />
            <input type="hidden" asp-for="ModuleId" />
            <div>
                <span>Assessment Title</span>
                <input asp-for="Name" type="text" placeholder="Enter assessment title" class="form-control" required />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div>
                <span>Number of Questions to Display</span>
                <input asp-for="NumberOfQuestions" class="form-control" placeholder="Enter number of questions" required />
                <span asp-validation-for="NumberOfQuestions" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <input asp-for="ShuffleQuestions" class="form-check-input" type="checkbox" />
                <label asp-for="ShuffleQuestions" class="form-check-label">Shuffle Questions</label>
            </div>
        </div>

        <div id="questions" class="container assessment-container">
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions[i];
                    <div class="question-section" id="question-@i">
                        <div class="num-delete-con">
                            <span class="assessment-count">Question @(i + 1)</span>
                            <button class="delete-question-button" type="button" onclick="deleteQuestion(@i)">
                                Delete Question <img src="~/images/Delete.png" />
                            </button>
                        </div>

                        <input type="hidden" name="Questions[@i].QuestionID" value="@question.QuestionID" />
                        <div class="question-container">
                            <span>Question Text</span>
                            <input type="text" name="Questions[@i].DisplayText" class="question-input form-control" value="@question.DisplayText" placeholder="Type the question here" required />
                        </div>

                        <div class="question-container">
                            <span>Question Type</span>
                            <input type="number" name="Questions[@i].QuestionType" class="form-control" value="@question.QuestionType" required />
                        </div>

                        <div class="option-delete-text-con">
                            <span>Options</span>
                        </div>

                        <div id="choices-@i" class="all-options-container">
                        @for (int j = 0; j < question.Choices.Count; j++)
                        {
                            var choice = question.Choices[j];
                                    <div id="choice-@i-@j" class="option-container">
                                <div class="option-letter-circle">@((char)(65 + j))</div>
                                        <input type="hidden" class="option-input" name="Questions[@i].Choices[@j].ChoiceID" value="@choice.ChoiceID" />
                                        <input type="text" class="option-input form-control" name="Questions[@i].Choices[@j].DisplayText" value="@choice.DisplayText" required />
                                        <button class="option-delete-button" type="button" onclick="deleteChoice(@i, @j)">
                                            <img src="~/images/Option_Delete.png" />
                                        </button>
                                        <div class="mark-as-correct-con">
                                            <input type="radio" name="Questions[@i].CorrectChoice" class="form-check-input" value="@j" @(choice.IsCorrect ? "checked" : "") />
                                            <span>Mark as Correct</span>
                                        </div>
                                    </div>
                        }
                        </div>

                        <div class="add-another-option-con">
                            <button id="AddAnotherOption" class="add-another-option-button" type="button" onclick="addChoice(@i)">
                                <img src="~/images/Add.png" /> Add Another Option
                            </button>
                        </div>
                        <hr />
                    </div>
            }
        </div>

        <div id="AddAnotherQuestion" class="container assessment-container add-another-question-button" type="button" onclick="addQuestion()">
            <img src="~/images/Add_W_Stroke.png" />
            <span>Add Question</span>
        </div>

        <div class="create-assessment-button-con">
            <a asp-action="Details" asp-controller="Module" asp-route-id="@Model.ModuleId" class="cancel-assesssment">Cancel</a>
            <input type="submit" value="@(isEdit ? "Save Changes" : "Create")" class="create-assessment" />
        </div>
    </form>
</div>

@section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                let questionIndex = @Model.Questions.Count;

                window.addQuestion = function () {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'question-section';
                    questionDiv.id = `question-${questionIndex}`;
                    questionDiv.innerHTML = `
                        <div class="num-delete-con">
                            <span class="assessment-count">Question ${questionIndex + 1}</span>
                            <button class="delete-question-button" type="button" onclick="deleteQuestion(${questionIndex})">
                                Delete Question <img src="/images/Delete.png" />
                            </button>
                        </div>

                        <input type="hidden" name="Questions[${questionIndex}].QuestionID" value="" />
                        <div class="question-container">
                            <span>Question Text</span>
                            <input type="text" name="Questions[${questionIndex}].DisplayText" class="question-input form-control" placeholder="Type the question here" required />
                        </div>

                        <div class="question-container">
                            <span>Question Type</span>
                            <input type="number" name="Questions[${questionIndex}].QuestionType" class="form-control" value="1" required />
                        </div>

                        <div id="choices-${questionIndex}" class="all-options-container">
                            <!-- Choices will be added here -->
                        </div>

                        <div class="add-another-option-con">
                            <button type="button" class="add-another-option-button" onclick="addChoice(${questionIndex})">
                                <img src="/images/Add.png" /> Add Option
                            </button>
                        </div>
                        <hr />
                    `;
                    document.getElementById('questions').appendChild(questionDiv);
                    questionIndex++;
                };

                window.addChoice = function (questionIdx) {
                    const choicesDiv = document.getElementById(`choices-${questionIdx}`);
                    const choiceCount = choicesDiv.children.length;
                    const choiceDiv = document.createElement('div');
                    choiceDiv.className = 'option-container';
                    choiceDiv.id = `choice-${questionIdx}-${choiceCount}`;
                    choiceDiv.innerHTML = `
                        <div class="option-letter-circle">${String.fromCharCode(65 + choiceCount)}</div>
                        <input type="hidden" name="Questions[${questionIdx}].Choices[${choiceCount}].ChoiceID" value="" />
                        <input type="text" name="Questions[${questionIdx}].Choices[${choiceCount}].DisplayText" class="option-input form-control" placeholder="Type the option here" required />
                        <button class="option-delete-button" type="button" onclick="deleteChoice(${questionIdx}, ${choiceCount})">
                            <img src="/images/Option_Delete.png" />
                        </button>
                        <div class="mark-as-correct-con">
                            <input type="radio" name="Questions[${questionIdx}].CorrectChoice" class="form-check-input" value="${choiceCount}" />
                            <span>Mark as Correct</span>
                        </div>
                    `;
                    choicesDiv.appendChild(choiceDiv);
                };

                window.deleteQuestion = function (questionIdx) {
                    document.getElementById(`question-${questionIdx}`).remove();
                    updateQuestionIndexes();
                };

                window.deleteChoice = function (questionIdx, choiceIdx) {
                    document.getElementById(`choice-${questionIdx}-${choiceIdx}`).remove();
                    updateChoiceIndexes(questionIdx);
                };

                function updateQuestionIndexes() {
                    const questions = document.querySelectorAll('.question-section');
                    questions.forEach((question, index) => {
                        question.id = `question-${index}`;
                        question.querySelector('.assessment-count').innerText = `Question ${index + 1}`;
                        question.querySelector('input[name^="Questions["]').name = `Questions[${index}].QuestionID`;
                        question.querySelector('input[name$="DisplayText"]').name = `Questions[${index}].DisplayText`;
                        question.querySelector('input[name$="QuestionType"]').name = `Questions[${index}].QuestionType`;
                        question.querySelector('.all-options-container').id = `choices-${index}`;
                    });
                    questionIndex = questions.length;
                }

                function updateChoiceIndexes(questionIdx) {
                    const choices = document.querySelectorAll(`#choices-${questionIdx} .option-container`);
                    choices.forEach((choice, index) => {
                        choice.id = `choice-${questionIdx}-${index}`;
                        choice.querySelector('input[name$="ChoiceID"]').name = `Questions[${questionIdx}].Choices[${index}].ChoiceID`;
                        choice.querySelector('input[name$="DisplayText"]').name = `Questions[${questionIdx}].Choices[${index}].DisplayText`;
                        choice.querySelector('input[type="radio"]').name = `Questions[${questionIdx}].CorrectChoice`;
                        choice.querySelector('button').setAttribute("onclick", `deleteChoice(${questionIdx}, ${index})`);
                    });
                }
            });
        </script>
}
