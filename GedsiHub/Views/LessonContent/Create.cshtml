@model GedsiHub.Models.LessonContent

@{
    Layout = "_LayoutApp";
    ViewData["Title"] = "Create Lesson Content";
}

<!-- Create Lesson Content Page -->
<div>
    <!-- Breadcrumbs -->
    <ol class="breadcrumb" id="breadcrumb">
        <li class="breadcrumb-item">
            <a asp-controller="Module" asp-action="Index"><span>Modules</span></a>
        </li>
        <li class="breadcrumb-item">
            <a asp-action="Details" asp-controller="Module" asp-route-id="@ViewBag.ModuleId">
                <span id="module_number" class="module_number">@ViewBag.ModuleTitle</span>
            </a>
        </li>
        <li class="breadcrumb-item">
            <span id="cms_lesson_breadcrumb">@ViewBag.LessonTitle</span>
        </li>
    </ol>

    <!-- Lesson Title: Should be fetch from the Lesson.Title -->
    <span id="added_module_title" class="added_module_title">@ViewBag.LessonTitle</span>

    <form asp-action="Create" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()

        <!-- Ensure LessonId is passed correctly -->
        <input type="hidden" asp-for="LessonId" />

        <!-- Container for Creating Lesson -->
        <div class="cms_white_base_container">
            <div class="cms_lesson_title">
                <span>Lesson</span>
                <span id="lesson_number_inwcon">@ViewBag.LessonNumber</span>
                <span id="lesson_title">@ViewBag.LessonTitle</span>
            </div>

            <!-- H5P Link Input -->
            <textarea asp-for="H5PEmbedCode" class="url_input_textarea" placeholder="Paste H5P link here" id="h5pEditorCreate"></textarea>
            <span asp-validation-for="H5PEmbedCode" class="text-danger"></span>

            <!-- Label -->
            <span class="lesson_content_text">Lesson Content</span>
            <!-- TinyMCE TextArea -->
            <textarea asp-for="TextContent" id="tinymce_textarea" row="" class="tinymce_textarea"></textarea>
            <span asp-validation-for="TextContent" class="text-danger"></span>

            <!-- or -->
            <span class="d-xxl-flex justify-content-xxl-center or_text">or</span>

            <!-- Upload Content Upload Container -->
            <div class="container d-xxl-flex justify-content-xxl-center Upload_Container" id="Lesson_Content_Upload_Container">
                <img class="upload_icon" src="~/images/Upload.png" />
                <span class="upload_text">Drag and Drop Files or Click to Upload Text or Images</span>
                <input type="file" name="uploadFile" id="uploadFile" class="uploadButton" accept=".mp4,.mov,.avi,.jpg,.png,.jpeg,.pdf,.doc,.docx" />
                <label for="uploadFile" class="uploadButtonLabel"> Upload</label>

                <!-- Container for displaying the preview -->
                <div id="MediaPreviewContainer"></div>
            </div>

            <!-- Cancel and Save Button -->
            <div class="cancel_save_con">
                <!-- Cancel Button -->
                <a asp-action="Details" asp-controller="Module" asp-route-id="@ViewBag.ModuleId" id="cancelLessonContentButton" class="btn fw-bolder cancelLessonContentButton">Cancel</a>
                <!-- Save Button -->
                <button type="submit" id="PreviewLessonContentButton" class="SaveButton">Save</button>
            </div>
        </div>


    </form>

</div>

@section Scripts {
    <script>
        // Initialize TinyMCE for Text Content
        tinymce.init({
            selector: '#tinymce_textarea',
            plugins: 'link image code',
            toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code | link image',
            height: 200,
            menubar: false,
            statusbar: false
        });

        // Preview selected media
        // Ensure script runs after all page elements have loaded
        window.addEventListener("load", function () {
            const uploadInput = document.getElementById('uploadText');
            const previewContainer = document.getElementById('MediaPreviewContainer');

            // Check that both the upload input and preview container exist
            if (!uploadInput) {
                console.warn("Upload input (uploadText) not found.");
                return;
            }
            if (!previewContainer) {
                console.warn("Preview container (MediaPreviewContainer) not found.");
                return;
            }

            // Event listener for file selection
            uploadInput.addEventListener('change', function (event) {
                const file = event.target.files[0];
                previewContainer.innerHTML = ''; // Clear previous content

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        // Create and append preview based on file type
                        if (file.type.startsWith("image/")) {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.style.maxWidth = "100%";
                            previewContainer.appendChild(img);
                        } else if (file.type.startsWith("video/")) {
                            const video = document.createElement('video');
                            video.src = e.target.result;
                            video.controls = true;
                            video.style.maxWidth = "100%";
                            previewContainer.appendChild(video);
                        } else {
                            console.warn("Unsupported file type for preview.");
                        }
                    };
                    reader.onerror = function (error) {
                        console.error("File could not be read:", error);
                    };
                    reader.readAsDataURL(file); // Convert file to data URL for preview
                }
            });
        });
    </script>
    <script src="~/js/tinymce-init.js"></script>
}