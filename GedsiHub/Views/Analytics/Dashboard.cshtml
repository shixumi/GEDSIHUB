@model GedsiHub.ViewModels.AnalyticsDashboardViewModel

@{
    Layout = "_LayoutApp";
    ViewData["Title"] = "Analytics Dashboard";
}

<div class="feedback-title-searcbar-con">
    <h1 id="feedback-responses-title" class="modules_title" style="color: #464040;">@ViewData["Title"]</h1>
    <div class="manage-user-and-gen-rep-con">
        <button id="GenerateReportButton" type="button" data-bs-toggle="tooltip" data-bs-placement="left" data-bss-tooltip="" data-bs-title="Click to generate report" onclick="location.href='@Url.Action("Demographic", "Reports")'">
            <img src="~/images/Graph.png" alt="Generate Report" /> Generate Report
        </button>
    </div>
</div>
<hr class="custom-hr">

<div class="dashboard-con-of-con">
    <div class="ad-dashboard-container" style="margin-top: -0.5rem;">
        <div class="container admin-dashboard-item-con">
            <div class="label-and-no-con">
                <span class="ad-mod-text-dashboard">Total Learners</span>
                <h1 class="ad-number">@Model.TotalLearners</h1>
            </div>
            <img src="~/images/Total_Learners.png" alt="Total Learners" />
        </div>
        <div class="container admin-dashboard-item-con">
            <div class="label-and-no-con">
                <span class="ad-mod-text-dashboard">Student Learners</span>
                <h1 class="ad-number">@Model.StudentLearners</h1>
            </div>
            <img src="~/images/Student_Learners.png" alt="Student Learners" />
        </div>
        <div class="container admin-dashboard-item-con">
            <div class="label-and-no-con">
                <span class="ad-mod-text-dashboard">Employee Learners</span>
                <h1 class="ad-number">@Model.EmployeeLearners</h1>
            </div>
            <img src="~/images/Employee_Learners.png" alt="Employee Learners" />
        </div>
        <div class="container admin-dashboard-item-con">
            <div class="label-and-no-con">
                <span class="ad-mod-text-dashboard">Total Modules</span>
                <h1 class="ad-number">@Model.TotalModules</h1>
            </div>
            <img src="~/images/Total_Modules.png" alt="Total Modules" />
        </div>
    </div>
</div>

<hr class="custom-hr" style="margin-top: 1.5rem;">

<!-- Modal for displaying full insights -->
<div id="insightModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span id="modalClose" class="close-btn">&times;</span>
        <h3 id="modalTitle" class="modal-title"></h3>
        <hr class="modal-divider">
        <div id="modalText" class="modal-text"></div>
    </div>
</div>

<div class="all-analytics-container">

    <!-- Row 2: Active Users, Module Performance -->
    <div class="analytics">
        <div class="container analytics_graph_container active-users-container">
            <div class="active-users-label-and-count-con">
                <h4>Current<br>Active Users</h4>
                <span class="activeUsersCount">Loading...</span>
            </div>
        </div>
        <div class="container analytics_graph_container module-performance-container">
            <h4>Module Performance</h4>
            <div class="form-group">
                <label for="moduleSelector" class="module-label">Select Module:</label>
                <select id="moduleSelector" class="select-module-analytics">
                    @foreach (var module in Model.Modules)
                    {
                        <option value="@module.ModuleId">@module.Title</option>
                    }
                </select>
            </div>
            <div class="module-performance-stats-container">
                <div class="module-performance-stat">
                    <p><strong>Average Quiz Score</strong></p>
                    <p id="averageQuizScore">Loading...</p>
                </div>
                <div class="module-performance-stat">
                    <p><strong>Completion Rate</strong></p>
                    <p id="completionRate">Loading...</p>
                </div>
                <div class="module-performance-stat">
                    <p><strong>Certificates Issued</strong></p>
                    <p id="certificateIssuance">Loading...</p>
                </div>
            </div>
            <span class="insight">
                <span class="truncated-text" id="insightModulePerformance">Generating insights...</span>
            </span>
        </div>
    </div>

    <!-- Row 1: Age Distribution, Gender Identity, Indigenous Membership -->
    <div class="analytics">
        <div id="age-distribution-container" class="container analytics_graph_container age-dist-wide">
            <h6>Age Distribution</h6>
            <canvas id="ageDistributionChart" class="full-width-canvas"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightAgeDistribution">Generating insights...</span>
            </span>
        </div>
        <div class="container analytics_graph_container gender-identity-narrow">
            <h6>Gender Identity</h6>
            <canvas id="genderIdentityChart"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightGenderIdentity">Generating insights...</span>
            </span>
        </div>
        <div class="container analytics_graph_container indigenous-membership-narrow">
            <h6>Indigenous Membership</h6>
            <canvas id="indigenousMembershipChart"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightIndigenousMembership">Generating insights...</span>
            </span>
        </div>
    </div>

    <!-- Row 3: Employment Status Breakdown, Course Associations -->
    <div class="analytics">
        <div class="container analytics_graph_container employment-status-container">
            <h6>Employment Status Breakdown</h6>
            <canvas id="employmentStatusChart"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightEmploymentStatus">Generating insights...</span>
            </span>
        </div>
        <div class="container analytics_graph_container course-associations-container">
            <h6>Course Associations</h6>
            <canvas id="courseAssociationsChart"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightCourseAssociations">Generating insights...</span>
            </span>
        </div>
    </div>

    <!-- Row 4: Post Count by Module and Keywords -->
    <div class="analytics">
        <div class="container analytics_graph_container post-count-container">
            <h6>Post Count by Module</h6>
            <div class="chart-container" style="width: 100%; height: 100%; position: relative;">
                <canvas id="postCountByModuleChart" style="width: 100%; height: 100%;"></canvas>
            </div>
            <span class="insight">
                <span class="truncated-text" id="insightPostCountByModule">Generating insights...</span>
            </span>
        </div>

        <div class="container analytics_graph_container">
            <h6>Common Keywords</h6>
            <canvas id="commonKeywordsCloud" width="800" height="400"></canvas>
            <span class="insight">
                <span class="truncated-text" id="insightCommonKeywords">Generating insights...</span>
            </span>
        </div>
    </div>
</div>

<style>
    /* Modal Styles */
 /* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px); /* Adds a blur effect to the background */
}

.modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    width: 80%;
    max-width: 600px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    animation: fadeIn 0.3s ease-in-out;
}

.modal-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
    margin-bottom: 10px;
}

.modal-divider {
    border: 0;
    height: 1px;
    background: #ddd;
    margin: 10px 0;
}

.modal-text {
    font-size: 1rem;
    color: #555;
    line-height: 1.6;
    max-height: 60vh;
    overflow-y: auto;
    padding-right: 10px;
}

.modal-text strong {
    color: #333;
    font-weight: bold;
}

.modal-text ul {
    list-style-type: disc;
    padding-left: 20px;
    margin: 10px 0;
}

.modal-text ul li {
    margin-bottom: 5px;
}

.close-btn {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.2s;
}

.close-btn:hover,
.close-btn:focus {
    color: #333;
    text-decoration: none;
}



    .insight .truncated-text {
        color: #888;
        font-style: italic;
    }
</style>



<!-- Charts Initialization Script -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/wordcloud"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Fetch AI insights after the page has loaded
            fetch('/Analytics/GenerateAIInsights', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ moduleId: null }) // Pass moduleId if needed
            })
                .then(response => response.json())
                .then(insights => {
                    // Update the insights on the page
                    Object.keys(insights).forEach(key => {
                        const insightElement = document.getElementById(`insight${key}`);
                        if (insightElement) {
                            const insightText = insights[key];
                            const truncatedText = insightText.length > 75 ? insightText.substring(0, 75) + "..." : insightText;
                            insightElement.innerText = truncatedText;

                            if (insightText.length > 75) {
                                const readMoreLink = document.createElement('a');
                                readMoreLink.href = "javascript:void(0);";
                                readMoreLink.className = "read-more";
                                readMoreLink.innerText = "Read More";
                                readMoreLink.onclick = () => showModal(key, insightText);
                                insightElement.parentElement.appendChild(readMoreLink);
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching AI insights:', error);
                    // Display an error message to the user
                    Object.keys(insights).forEach(key => {
                        const insightElement = document.getElementById(`insight${key}`);
                        if (insightElement) {
                            insightElement.innerText = "Failed to generate insights. Please try again later.";
                        }
                    });
                });

            // Function to show modal with full insight text
            function showModal(key, fullText) {
                const modal = document.getElementById("insightModal");
                const modalTitle = document.getElementById("modalTitle");
                const modalText = document.getElementById("modalText");

                // Set the title and content
                modalTitle.textContent = `Insight for ${key}`;
                modalText.innerHTML = formatInsightText(fullText);

                // Display the modal
                modal.style.display = "block";
            }

            function formatInsightText(text) {
                // Replace newlines with <br> for better readability
                return text.replace(/\n/g, "<br>");
            }

            function closeModal() {
                const modal = document.getElementById("insightModal");
                modal.style.display = "none";
            }

            // Close modal when clicking the close button or outside the modal
            document.getElementById("modalClose").addEventListener("click", closeModal);
            window.addEventListener("click", function (event) {
                const modal = document.getElementById("insightModal");
                if (event.target === modal) {
                    closeModal();
                }
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Fetch and render User Demographics
            fetch('/Analytics/GetUserDemographics')
                .then(response => response.json())
                .then(data => {
                    // Age Distribution
                    const ageLabels = data.ageDistribution.map(a => a.year);
                    const ageCounts = data.ageDistribution.map(a => a.count);

                    new Chart(document.getElementById('ageDistributionChart'), {
                        type: 'bar',
                        data: {
                            labels: ageLabels,
                            datasets: [{
                                label: 'Number of Users',
                                data: ageCounts,
                                backgroundColor: 'rgba(42, 96, 113, 0.6)'
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: false,
                                    text: 'Age Distribution'
                                },
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Number of Users'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Year of Birth'
                                    }
                                }
                            }
                        }
                    });

                    // Gender Identity
                    const genderLabels = data.genderIdentity.map(g => g.gender);
                    const genderCounts = data.genderIdentity.map(g => g.count);

                    new Chart(document.getElementById('genderIdentityChart'), {
                        type: 'pie',
                        data: {
                            labels: genderLabels,
                            datasets: [{
                                data: genderCounts,
                                backgroundColor: ['#6b2a1e', '#d8b27b', '#3c6470', '#7b5742', '#5c7786']
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                title: {
                                    display: false,
                                    text: 'Gender Identity'
                                }
                            }
                        }
                    });

                    // Indigenous Membership
                    const indigenousLabels = data.indigenousMembership.map(i => i.isMember ? "Indigenous" : "Non-Indigenous");
                    const indigenousCounts = data.indigenousMembership.map(i => i.count);

                    new Chart(document.getElementById('indigenousMembershipChart'), {
                        type: 'doughnut',
                        data: {
                            labels: indigenousLabels,
                            datasets: [{
                                data: indigenousCounts,
                                backgroundColor: ['#c48c3a', '#3c6470']
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                title: {
                                    display: false,
                                    text: 'Indigenous Membership'
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching user demographics:', error);
                });

            // Module Performance
            document.getElementById('moduleSelector').addEventListener('change', function () {
                const moduleId = this.value;
                fetch(`/Analytics/GetModulePerformance?moduleId=${moduleId}`)
                    .then(response => response.json())
                    .then(data => {
                        // Update UI with correct field names from the response
                        document.getElementById('averageQuizScore').innerText = data.averageQuizScore !== null ? data.averageQuizScore.toFixed(2) : 'N/A';
                        document.getElementById('completionRate').innerText = data.completionRate !== null ? data.completionRate.toFixed(2) + '%' : 'N/A';
                        document.getElementById('certificateIssuance').innerText = data.certificateIssuance !== null ? data.certificateIssuance : 'N/A';
                    })
                    .catch(error => {
                        console.error('Error fetching module performance data:', error);
                        document.getElementById('averageQuizScore').innerText = 'N/A';
                        document.getElementById('completionRate').innerText = 'N/A';
                        document.getElementById('certificateIssuance').innerText = 'N/A';
                    });
            });

            // Initial load for module performance
            const moduleSelector = document.getElementById('moduleSelector');
            if (moduleSelector && moduleSelector.options.length > 0) {
                // Optionally, select a specific module or default to first
                moduleSelector.selectedIndex = 0; // Select first module
                moduleSelector.dispatchEvent(new Event('change'));
            }

            // Employment Status Breakdown
            fetch('/Analytics/GetEmploymentStatusBreakdown')
                .then(response => response.json())
                .then(data => {
                    const labels = data.map(e => e.status);
                    const counts = data.map(e => e.count);

                    new Chart(document.getElementById('employmentStatusChart'), {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Number of Users',
                                data: counts,
                                backgroundColor: 'rgba(196, 140, 58, 0.6)'
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: false,
                                    text: 'Employment Status Breakdown'
                                },
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Number of Users'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Employment Status'
                                    }
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching employment status breakdown:', error);
                });

            // Course Associations
            fetch('/Analytics/GetCourseAssociations')
                .then(response => response.json())
                .then(data => {
                    const labels = data.map(c => c.courseName);
                    const counts = data.map(c => c.count);

                    new Chart(document.getElementById('courseAssociationsChart'), {
                        type: 'pie',
                        data: {
                            labels: labels,
                            datasets: [{
                                data: counts,
                                backgroundColor: ['#3c6470', '#7b5742', '#96aab8', '#5c7786', '#6b2a1e', '#d8b27b']
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                title: {
                                    display: false,
                                    text: 'Course Associations'
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching course associations:', error);
                });

            // Current Active Users
            fetch('/Analytics/GetCurrentActiveUsers')
                .then(response => response.json())
                .then(data => {
                    const activeUsersElement = document.querySelector('.activeUsersCount');
                    if (activeUsersElement) {
                        activeUsersElement.innerText = data.ActiveUsers;
                    }
                })
                .catch(error => {
                    console.error('Error fetching current active users:', error);
                });

            // Post Count by Module
            fetch('/Analytics/GetPostCountByModule')
                .then(response => response.json())
                .then(data => {
                    const labels = data.map(item => item.moduleTitle);
                    const counts = data.map(item => item.count);

                    new Chart(document.getElementById('postCountByModuleChart'), {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Post Count',
                                data: counts,
                                backgroundColor: '#660000',
                                borderColor: '#920000',
                                borderWidth: 1,
                                hoverBackgroundColor: '#920000'
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: 'Post Count by Module'
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Number of Posts'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Modules'
                                    }
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching post count by module:', error);
                });

            // Common Keywords Word Cloud
            fetch('/Analytics/GetCommonKeywords')
                .then(response => response.json())
                .then(data => {
                    const words = data.map(item => [item.keyword, item.count]);

                    WordCloud(document.getElementById('commonKeywordsCloud'), {
                        list: words,
                        gridSize: Math.round(8 * window.devicePixelRatio),
                        weightFactor: 15,
                        fontFamily: 'Arial, sans-serif',
                        color: 'random-dark',
                        rotateRatio: 0.3,
                        rotationSteps: 2,
                        backgroundColor: '#ffffff'
                    });
                })
                .catch(error => {
                    console.error('Error fetching common keywords:', error);
                });
        });
    </script>
}