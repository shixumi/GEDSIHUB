// <auto-generated />
using System;
using GedsiHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GedsiHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241025124941_Added Flairs and Tags 2.0")]
    partial class AddedFlairsandTags20
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollegeDepartment", b =>
                {
                    b.Property<int>("CollegeDeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollegeDeptId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CollegeDeptId");

                    b.ToTable("CollegeDepartments");

                    b.HasData(
                        new
                        {
                            CollegeDeptId = 1,
                            DepartmentName = "College of Accountancy and Finance (CAF)"
                        },
                        new
                        {
                            CollegeDeptId = 2,
                            DepartmentName = "College of Architecture, Design and the Built Environment (CADBE)"
                        },
                        new
                        {
                            CollegeDeptId = 3,
                            DepartmentName = "College of Arts and Letters (CAL)"
                        },
                        new
                        {
                            CollegeDeptId = 4,
                            DepartmentName = "College of Business Administration (CBA)"
                        },
                        new
                        {
                            CollegeDeptId = 5,
                            DepartmentName = "College of Communication (COC)"
                        },
                        new
                        {
                            CollegeDeptId = 6,
                            DepartmentName = "College of Computer and Information Sciences (CCIS)"
                        },
                        new
                        {
                            CollegeDeptId = 7,
                            DepartmentName = "College of Education (COED)"
                        },
                        new
                        {
                            CollegeDeptId = 8,
                            DepartmentName = "College of Engineering (CE)"
                        },
                        new
                        {
                            CollegeDeptId = 9,
                            DepartmentName = "College of Human Kinetics (CHK)"
                        },
                        new
                        {
                            CollegeDeptId = 10,
                            DepartmentName = "College of Law (CL)"
                        },
                        new
                        {
                            CollegeDeptId = 11,
                            DepartmentName = "College of Political Science and Public Administration (CPSPA)"
                        },
                        new
                        {
                            CollegeDeptId = 12,
                            DepartmentName = "College of Social Sciences and Development (CSSD)"
                        },
                        new
                        {
                            CollegeDeptId = 13,
                            DepartmentName = "College of Science (CS)"
                        },
                        new
                        {
                            CollegeDeptId = 14,
                            DepartmentName = "College of Tourism, Hospitality and Transportation Management (CTHTM)"
                        });
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CollegeDeptId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CourseId");

                    b.HasIndex("CollegeDeptId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CollegeDeptId = 1,
                            CourseName = "Bachelor of Science in Accountancy (BSA)"
                        },
                        new
                        {
                            CourseId = 2,
                            CollegeDeptId = 1,
                            CourseName = "Bachelor of Science in Management Accounting (BSMA)"
                        },
                        new
                        {
                            CourseId = 3,
                            CollegeDeptId = 1,
                            CourseName = "Bachelor of Science in Business Administration Major in Financial Management (BSBAFM)"
                        },
                        new
                        {
                            CourseId = 4,
                            CollegeDeptId = 2,
                            CourseName = "Bachelor of Science in Architecture (BS-ARCH)"
                        },
                        new
                        {
                            CourseId = 5,
                            CollegeDeptId = 2,
                            CourseName = "Bachelor of Science in Interior Design (BSID)"
                        },
                        new
                        {
                            CourseId = 6,
                            CollegeDeptId = 2,
                            CourseName = "Bachelor of Science in Environmental Planning (BSEP)"
                        },
                        new
                        {
                            CourseId = 7,
                            CollegeDeptId = 3,
                            CourseName = "Bachelor of Arts in English Language Studies (ABELS)"
                        },
                        new
                        {
                            CourseId = 8,
                            CollegeDeptId = 3,
                            CourseName = "Bachelor of Arts in Filipinology (ABF)"
                        },
                        new
                        {
                            CourseId = 9,
                            CollegeDeptId = 3,
                            CourseName = "Bachelor of Arts in Literary and Cultural Studies (ABLCS)"
                        },
                        new
                        {
                            CourseId = 10,
                            CollegeDeptId = 3,
                            CourseName = "Bachelor of Arts in Philosophy (AB-PHILO)"
                        },
                        new
                        {
                            CourseId = 11,
                            CollegeDeptId = 3,
                            CourseName = "Bachelor of Performing Arts major in Theater Arts (BPEA)"
                        },
                        new
                        {
                            CourseId = 12,
                            CollegeDeptId = 4,
                            CourseName = "Doctor in Business Administration (DBA)"
                        },
                        new
                        {
                            CourseId = 13,
                            CollegeDeptId = 4,
                            CourseName = "Master in Business Administration (MBA)"
                        },
                        new
                        {
                            CourseId = 14,
                            CollegeDeptId = 4,
                            CourseName = "Bachelor of Science in Business Administration major in Human Resource Management (BSBAHRM)"
                        },
                        new
                        {
                            CourseId = 15,
                            CollegeDeptId = 4,
                            CourseName = "Bachelor of Science in Business Administration major in Marketing Management (BSBA-MM)"
                        },
                        new
                        {
                            CourseId = 16,
                            CollegeDeptId = 4,
                            CourseName = "Bachelor of Science in Entrepreneurship (BSENTREP)"
                        },
                        new
                        {
                            CourseId = 17,
                            CollegeDeptId = 4,
                            CourseName = "Bachelor of Science in Office Administration (BSOA)"
                        },
                        new
                        {
                            CourseId = 18,
                            CollegeDeptId = 5,
                            CourseName = "Bachelor in Advertising and Public Relations (BADPR)"
                        },
                        new
                        {
                            CourseId = 19,
                            CollegeDeptId = 5,
                            CourseName = "Bachelor of Arts in Broadcasting (BA Broadcasting)"
                        },
                        new
                        {
                            CourseId = 20,
                            CollegeDeptId = 5,
                            CourseName = "Bachelor of Arts in Communication Research (BACR)"
                        },
                        new
                        {
                            CourseId = 21,
                            CollegeDeptId = 5,
                            CourseName = "Bachelor of Arts in Journalism (BAJ)"
                        },
                        new
                        {
                            CourseId = 22,
                            CollegeDeptId = 6,
                            CourseName = "Bachelor of Science in Computer Science (BSCS)"
                        },
                        new
                        {
                            CourseId = 23,
                            CollegeDeptId = 6,
                            CourseName = "Bachelor of Science in Information Technology (BSIT)"
                        },
                        new
                        {
                            CourseId = 24,
                            CollegeDeptId = 7,
                            CourseName = "Doctor of Philsophy in Education Management (PhDEM)"
                        },
                        new
                        {
                            CourseId = 25,
                            CollegeDeptId = 7,
                            CourseName = "Master of Arts in Education Management (MAEM) with Specialization in: Educational Leadership, Instructional Leadership"
                        },
                        new
                        {
                            CourseId = 26,
                            CollegeDeptId = 7,
                            CourseName = "Master in Business Education (MBE)"
                        },
                        new
                        {
                            CourseId = 27,
                            CollegeDeptId = 7,
                            CourseName = "Master in Library and Information Science (MLIS)"
                        },
                        new
                        {
                            CourseId = 28,
                            CollegeDeptId = 7,
                            CourseName = "Master of Arts in English Language Teaching (MAELT)"
                        },
                        new
                        {
                            CourseId = 29,
                            CollegeDeptId = 7,
                            CourseName = "Master of Arts in Education major in Mathematics Education (MAEd-ME)"
                        },
                        new
                        {
                            CourseId = 30,
                            CollegeDeptId = 7,
                            CourseName = "Master of Arts in Physical Education and Sports (MAPES)"
                        },
                        new
                        {
                            CourseId = 31,
                            CollegeDeptId = 7,
                            CourseName = "Master of Arts in Education major in Teaching in the Challenged Areas (MAED-TCA)"
                        },
                        new
                        {
                            CourseId = 32,
                            CollegeDeptId = 7,
                            CourseName = "Post-Baccalaureate Diploma in Education (PBDE)"
                        },
                        new
                        {
                            CourseId = 33,
                            CollegeDeptId = 7,
                            CourseName = "Bachelor of Technology and Livelihood Education (BTLEd) major in: Home Economics, Industrial Arts, Information and Communication Technology"
                        },
                        new
                        {
                            CourseId = 34,
                            CollegeDeptId = 7,
                            CourseName = "Bachelor of Library and Information Science (BLIS)"
                        },
                        new
                        {
                            CourseId = 35,
                            CollegeDeptId = 7,
                            CourseName = "Bachelor of Secondary Education (BSEd) major in: English, Mathematics, Science, Filipino, Social Studies"
                        },
                        new
                        {
                            CourseId = 36,
                            CollegeDeptId = 7,
                            CourseName = "Bachelor of Elementary Education (BEEd)"
                        },
                        new
                        {
                            CourseId = 37,
                            CollegeDeptId = 7,
                            CourseName = "Bachelor of Early Childhood Education (BECEd)"
                        },
                        new
                        {
                            CourseId = 38,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Civil Engineering (BSCE)"
                        },
                        new
                        {
                            CourseId = 39,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Computer Engineering (BSCpE)"
                        },
                        new
                        {
                            CourseId = 40,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Electrical Engineering (BSEE)"
                        },
                        new
                        {
                            CourseId = 41,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Electronics Engineering (BSECE)"
                        },
                        new
                        {
                            CourseId = 42,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Industrial Engineering (BSIE)"
                        },
                        new
                        {
                            CourseId = 43,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Mechanical Engineering (BSME)"
                        },
                        new
                        {
                            CourseId = 44,
                            CollegeDeptId = 8,
                            CourseName = "Bachelor of Science in Railway Engineering (BSRE)"
                        },
                        new
                        {
                            CourseId = 45,
                            CollegeDeptId = 9,
                            CourseName = "Bachelor of Physical Education (BPE)"
                        },
                        new
                        {
                            CourseId = 46,
                            CollegeDeptId = 9,
                            CourseName = "Bachelor of Science in Exercises and Sports (BSESS)"
                        },
                        new
                        {
                            CourseId = 47,
                            CollegeDeptId = 10,
                            CourseName = "Juris Doctor (JD)"
                        },
                        new
                        {
                            CourseId = 48,
                            CollegeDeptId = 11,
                            CourseName = "Doctor in Public Administration (DPA)"
                        },
                        new
                        {
                            CourseId = 49,
                            CollegeDeptId = 11,
                            CourseName = "Master in Public Administration (MPA)"
                        },
                        new
                        {
                            CourseId = 50,
                            CollegeDeptId = 11,
                            CourseName = "Bachelor of Public Administration (BPA)"
                        },
                        new
                        {
                            CourseId = 51,
                            CollegeDeptId = 11,
                            CourseName = "Bachelor of Arts in International Studies (BAIS)"
                        },
                        new
                        {
                            CourseId = 52,
                            CollegeDeptId = 11,
                            CourseName = "Bachelor of Arts in Political Economy (BAPE)"
                        },
                        new
                        {
                            CourseId = 53,
                            CollegeDeptId = 11,
                            CourseName = "Bachelor of Arts in Political Science (BAPS)"
                        },
                        new
                        {
                            CourseId = 54,
                            CollegeDeptId = 12,
                            CourseName = "Bachelor of Arts in History (BAH)"
                        },
                        new
                        {
                            CourseId = 55,
                            CollegeDeptId = 12,
                            CourseName = "Bachelor of Arts in Sociology (BAS)"
                        },
                        new
                        {
                            CourseId = 56,
                            CollegeDeptId = 12,
                            CourseName = "Bachelor of Science in Cooperatives (BSC)"
                        },
                        new
                        {
                            CourseId = 57,
                            CollegeDeptId = 12,
                            CourseName = "Bachelor of Science in Economics (BSE)"
                        },
                        new
                        {
                            CourseId = 58,
                            CollegeDeptId = 12,
                            CourseName = "Bachelor of Science in Psychology (BSPSY)"
                        },
                        new
                        {
                            CourseId = 59,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science Food Technology (BSFT)"
                        },
                        new
                        {
                            CourseId = 60,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Applied Mathematics (BSAPMATH)"
                        },
                        new
                        {
                            CourseId = 61,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Biology (BSBIO)"
                        },
                        new
                        {
                            CourseId = 62,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Chemistry (BSCHEM)"
                        },
                        new
                        {
                            CourseId = 63,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Mathematics (BSMATH)"
                        },
                        new
                        {
                            CourseId = 64,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Nutrition and Dietetics (BSND)"
                        },
                        new
                        {
                            CourseId = 65,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Physics (BSPHY)"
                        },
                        new
                        {
                            CourseId = 66,
                            CollegeDeptId = 13,
                            CourseName = "Bachelor of Science in Statistics (BSSTAT)"
                        },
                        new
                        {
                            CourseId = 67,
                            CollegeDeptId = 14,
                            CourseName = "Bachelor of Science in Hospitality Management (BSHM)"
                        },
                        new
                        {
                            CourseId = 68,
                            CollegeDeptId = 14,
                            CourseName = "Bachelor of Science in Tourism Management (BSTM)"
                        },
                        new
                        {
                            CourseId = 69,
                            CollegeDeptId = 14,
                            CourseName = "Bachelor of Science in Transportation Management (BSTRM)"
                        });
                });

            modelBuilder.Entity("GedsiHub.Models.ActiveUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("active_user_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("GedsiHub.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("admin_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("admin_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("GenderIdentity")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("gender_identity");

                    b.Property<string>("Honorifics")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("honorifics");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsMemberOfIndigenousCommunity")
                        .HasColumnType("bit")
                        .HasColumnName("is_indigenous_member");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("LivedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lived_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("profile_picture_path");

                    b.Property<string>("Pronouns")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("pronouns");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("sex");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("suffix");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("user_tbl", (string)null);
                });

            modelBuilder.Entity("GedsiHub.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("H5PEmbedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("ModuleId")
                        .IsUnique();

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("GedsiHub.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CertificateId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("GedsiHub.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupportEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TikTok")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ContactInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Facebook = "https://www.facebook.com/gadpup",
                            Instagram = "https://www.instagram.com/pupgadofficial",
                            PhoneNumber = "+1-800-123-4567",
                            SupportEmail = "dev.gedsihub@gmail.com",
                            TikTok = "https://www.tiktok.com/@pup.gado",
                            Website = "https://www.pup.edu.ph/research/gado/",
                            X = "https://x.com/PUPGADO"
                        });
                });

            modelBuilder.Entity("GedsiHub.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("BranchOfficeSectionUnit")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("branch_office_section_unit");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("employee_type");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("employment_status");

                    b.Property<string>("Position")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("position");

                    b.Property<string>("Sector")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("sector");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("employee_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("DATE")
                        .HasColumnName("enrollment_date");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("enrollment_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "GEDSI stands for Gender Equality, Diversity, and Social Inclusion. It focuses on promoting equality and inclusivity in various sectors.",
                            Category = "General",
                            Question = "What is GEDSI?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "To enroll in a course, simply navigate to the course catalog and click 'Enroll' on the course you're interested in.",
                            Category = "Courses",
                            Question = "How do I enroll in a course?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "You can reset your password by clicking on 'Forgot Password' on the login page and following the instructions.",
                            Category = "Account",
                            Question = "How do I reset my password?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "If you're having trouble logging in, please check your credentials or reset your password. If the issue persists, contact technical support.",
                            Category = "Technical Support",
                            Question = "Why can't I log in?"
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Once you've completed all the required modules and assessments, your certificate will be automatically generated and available for download in your profile.",
                            Category = "Certificates",
                            Question = "How do I get a certificate after completing a course?"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "You can view your course progress by going to the 'My Courses' section, where detailed analytics on your module completions will be displayed.",
                            Category = "Analytics",
                            Question = "How can I view my course progress?"
                        },
                        new
                        {
                            Id = 7,
                            Answer = "Your data is protected by our use of ASP.NET Core Data Protection, ensuring encryption at rest and in transit.",
                            Category = "Security",
                            Question = "How is my data protected?"
                        },
                        new
                        {
                            Id = 8,
                            Answer = "No, you need to complete all previous modules before accessing the final condensed learning module.",
                            Category = "Modules",
                            Question = "Can I access the final module directly?"
                        },
                        new
                        {
                            Id = 9,
                            Answer = "You can participate in forum discussions by navigating to the relevant course module and selecting the 'Forum' tab. Choose a topic and contribute to the discussion.",
                            Category = "Forum",
                            Question = "How can I participate in forum discussions?"
                        },
                        new
                        {
                            Id = 10,
                            Answer = "Yes, you can retake a quiz up to three times. After that, please contact your course administrator for further assistance.",
                            Category = "Courses",
                            Question = "Can I retake a quiz if I fail?"
                        });
                });

            modelBuilder.Entity("GedsiHub.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("image_path");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_comment_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumCommentReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("reason");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ReportId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_comment_report_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Flair")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("flair");

                    b.Property<string>("ImagePath")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("image_path");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("PollOptions")
                        .HasColumnType("TEXT")
                        .HasColumnName("poll_options");

                    b.Property<string>("Tag")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("tag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("PostId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_post_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumPostReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("reason");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ReportId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_post_report_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionInt")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LessonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("GedsiHub.Models.LessonContent", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("H5PEmbedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("PositionInt")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonContents");
                });

            modelBuilder.Entity("GedsiHub.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionInt")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4465),
                            Description = "This module covers the basics of gender equality, exploring the significance of gender equality in society and the workplace.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Introduction to Gender Equality"
                        },
                        new
                        {
                            ModuleId = 2,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4467),
                            Description = "In this module, you'll learn about different gender identities, gender expression, and the importance of respecting personal pronouns.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Understanding Gender Identities"
                        },
                        new
                        {
                            ModuleId = 3,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4469),
                            Description = "This module discusses how diversity and inclusion can benefit organizations and create a healthier work environment.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Diversity and Inclusion in the Workplace"
                        },
                        new
                        {
                            ModuleId = 4,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4470),
                            Description = "Learn about how gender plays a role in global development, examining gender policies and frameworks used worldwide.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Gender and Development: Global Perspectives"
                        },
                        new
                        {
                            ModuleId = 5,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4472),
                            Description = "This module introduces practical strategies for fostering social inclusion in various settings, from schools to workplaces.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Social Inclusion Strategies"
                        },
                        new
                        {
                            ModuleId = 6,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4474),
                            Description = "This is the final module summarizing all previous modules, offering an interactive format to test your knowledge and understanding.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Final Condensed Learning Module"
                        },
                        new
                        {
                            ModuleId = 7,
                            Color = "#000000",
                            CreatedDate = new DateTime(2024, 10, 25, 12, 49, 40, 599, DateTimeKind.Utc).AddTicks(4507),
                            Description = "This module educates about gender-based violence, its impact on individuals, and measures for prevention and support.",
                            PositionInt = 0,
                            Status = 0,
                            Title = "Gender-Based Violence and Prevention"
                        });
                });

            modelBuilder.Entity("GedsiHub.Models.ModuleActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActivityId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("module_activity_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("CollegeDeptId")
                        .HasColumnType("int")
                        .HasColumnName("college_dept_id");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Section")
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("section");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("StudentId");

                    b.HasIndex("CollegeDeptId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.UserEngagement", b =>
                {
                    b.Property<int>("EngagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngagementId"));

                    b.Property<bool>("IsModuleCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("QuizScore")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EngagementId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_engagement_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.UserFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("SatisfactionScore")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_feedback_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.UserLogin", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.ToTable("user_login_analytics_tbl");
                });

            modelBuilder.Entity("GedsiHub.Models.UserProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("progress_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<byte[]>("LastAccessed")
                        .IsRequired()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("last_accessed");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<decimal>("ProgressPercentage")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("progress_percentage");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ProgressId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("progress_module_tbl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claim_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claim_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_login_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role_tbl", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_token_tbl", (string)null);
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.HasOne("CollegeDepartment", "CollegeDepartment")
                        .WithMany("Courses")
                        .HasForeignKey("CollegeDeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollegeDepartment");
                });

            modelBuilder.Entity("GedsiHub.Models.Admin", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithOne("Admin")
                        .HasForeignKey("GedsiHub.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.Assessment", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithOne("Assessment")
                        .HasForeignKey("GedsiHub.Models.Assessment", "ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("GedsiHub.Models.Certificate", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany("Certificates")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.Employee", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("GedsiHub.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.Enrollment", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany("Enrollments")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumComment", b =>
                {
                    b.HasOne("GedsiHub.Models.ForumPost", "ForumPost")
                        .WithMany("ForumComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("ForumComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumCommentReport", b =>
                {
                    b.HasOne("GedsiHub.Models.ForumComment", "ForumComment")
                        .WithMany("CommentReports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("ForumCommentReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumPost", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("ForumPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumPostReport", b =>
                {
                    b.HasOne("GedsiHub.Models.ForumPost", "ForumPost")
                        .WithMany("PostReports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("ForumPostReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.Lesson", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("GedsiHub.Models.LessonContent", b =>
                {
                    b.HasOne("GedsiHub.Models.Lesson", "Lesson")
                        .WithMany("LessonContents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("GedsiHub.Models.ModuleActivity", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("GedsiHub.Models.Student", b =>
                {
                    b.HasOne("CollegeDepartment", "CollegeDepartment")
                        .WithMany("Students")
                        .HasForeignKey("CollegeDeptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("GedsiHub.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CollegeDepartment");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GedsiHub.Models.UserEngagement", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("GedsiHub.Models.UserFeedback", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("GedsiHub.Models.UserLogin", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GedsiHub.Models.UserProgress", b =>
                {
                    b.HasOne("GedsiHub.Models.Module", "Module")
                        .WithMany("UserProgresses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", "User")
                        .WithMany("UserProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GedsiHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GedsiHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollegeDepartment", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GedsiHub.Models.ApplicationUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Enrollments");

                    b.Navigation("ForumCommentReports");

                    b.Navigation("ForumComments");

                    b.Navigation("ForumPostReports");

                    b.Navigation("ForumPosts");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumComment", b =>
                {
                    b.Navigation("CommentReports");
                });

            modelBuilder.Entity("GedsiHub.Models.ForumPost", b =>
                {
                    b.Navigation("ForumComments");

                    b.Navigation("PostReports");
                });

            modelBuilder.Entity("GedsiHub.Models.Lesson", b =>
                {
                    b.Navigation("LessonContents");
                });

            modelBuilder.Entity("GedsiHub.Models.Module", b =>
                {
                    b.Navigation("Assessment");

                    b.Navigation("Certificates");

                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");

                    b.Navigation("UserProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
